//
// Copyright (c) 2020, pestophagous (pestophagous@users.noreply.github.com)
// See LICENSE.txt
//
// https://github.com/pestophagous/
//
#include "view_model_collection.h"

#include <QtQml/QQmlContext>

#include "autogenerated/version.h" // USE THIS SPARINGLY. IT CAN TRIGGER MANY REBUILDS.
#include "gui_tests.h"
#include "src/app/event_filter.h"
#include "src/lib_app/cli_options.h"
#include "src/lib_app/fsynth.h"
#include "src/lib_app/logging_tags.h"
#include "src/lib_app/music_notes.h"
#include "src/lib_app/resources.h"
#include "src/libstyles/resource_helper.h"
#include "src/util/qml_message_interceptor.h"
#include "src/util/random_concrete.h"
#include "src/util/usage_log_t.hpp"

namespace heory
{
namespace
{
    std::unique_ptr<Random> MakeRandomnessProvider( const bool testing )
    {
        if( testing )
        {
            return RandomConcrete::RandomConcreteForTests();
        }
        else
        {
            return RandomConcrete::RandomConcreteForProduction();
        }
    }
} // namespace

using str = std::string;

// clang-format off
ViewModelCollection::ViewModelCollection( const QGuiApplication& app )
    : m_opts( std::make_unique<CliOptions>( app ) ),
      m_eventFilter( std::make_unique<EventFilter>() ),
      m_qmlLogger( std::make_unique<QmlMessageInterceptor>( !m_opts->MaximumQtLogging() ) ),
      m_logging( std::make_unique<LoggingTags>( *m_opts ) ),
      m_fsynth( std::make_unique<FsynthWrapper>( *m_opts ) ),
      m_random( MakeRandomnessProvider( m_opts->RunningGuiTests() ) )
// clang-format on
{
    heory::initLibResources();

    // Do after the 'init..resource' calls, in case any ctor wants rsrcs:
    m_musicNotes = std::make_unique<MusicNotes>( m_fsynth.get(), m_random.get() );
}

ViewModelCollection::~ViewModelCollection() = default;

void ViewModelCollection::ExportContextPropertiesToQml( QQmlApplicationEngine* engine )
{
    fprintf( stderr, "GUI Build Info: %s %s\n", BUILD_ON_DATE, GIT_HASH_WHEN_BUILT );

    // Sort of a "silly" demo usage of project::Log<>
    Log( str( "rootContext" ), engine )
        ->rootContext()
        ->setContextProperty( "versionInfoBuildDateString", BUILD_ON_DATE );
    // Another sort of "silly" demo usage of project::Log<>
    Log( str( "setContextProperty" ), engine->rootContext() )
        ->setContextProperty( "versionInfoGitHash", GIT_HASH_WHEN_BUILT );

    Log( str( "ExportContextPropertiesToQml" ), m_logging )
        ->ExportContextPropertiesToQml( engine );
    ResourceHelper::ExportContextPropertiesToQml( engine );

    m_musicNotes->ExportContextPropertiesToQml( engine );

    // Keep this at the END of the 'ExportContext...' method, so all view models are
    // exported before any tests run
    if( Log( str( "RunningGuiTests" ), m_opts )->RunningGuiTests() )
    {
        m_guiTests = std::make_unique<GuiTests>( *engine, m_random.get(), m_qmlLogger.get() );
    }
}

void ViewModelCollection::SetRootObject( QObject* object )
{
    m_eventFilter->FilterEventsDirectedAtThisObject( object );
}
} // namespace heory
