diff --git a/fluid_midi.h b/fluid_midi.h
index 9e34a0f..86ad6cf 100644
--- a/fluid_midi.h
+++ b/fluid_midi.h
@@ -21,9 +21,6 @@
 #ifndef _FLUID_MIDI_H
 #define _FLUID_MIDI_H
 
-#include "fluidsynth_priv.h"
-#include "fluid_sys.h"
-#include "fluid_list.h"
 
 typedef struct _fluid_midi_parser_t fluid_midi_parser_t;
 
@@ -267,84 +264,4 @@ typedef struct
     size_t buffer_len;  /** Number of bytes in buffer; 0 if filename */
 } fluid_playlist_item;
 
-/*
- * fluid_player
- */
-struct _fluid_player_t
-{
-    int status;
-    int ntracks;
-    fluid_track_t *track[MAX_NUMBER_OF_TRACKS];
-    fluid_synth_t *synth;
-    fluid_timer_t *system_timer;
-    fluid_sample_timer_t *sample_timer;
-
-    int loop; /* -1 = loop infinitely, otherwise times left to loop the playlist */
-    fluid_list_t *playlist; /* List of fluid_playlist_item* objects */
-    fluid_list_t *currentfile; /* points to an item in files, or NULL if not playing */
-
-    char send_program_change; /* should we ignore the program changes? */
-    char use_system_timer;   /* if zero, use sample timers, otherwise use system clock timer */
-    char reset_synth_between_songs; /* 1 if system reset should be sent to the synth between songs. */
-    int seek_ticks;           /* new position in tempo ticks (midi ticks) for seeking */
-    int start_ticks;          /* the number of tempo ticks passed at the last tempo change */
-    int cur_ticks;            /* the number of tempo ticks passed */
-    int begin_msec;           /* the time (msec) of the beginning of the file */
-    int start_msec;           /* the start time of the last tempo change */
-    int cur_msec;             /* the current time */
-    int miditempo;            /* as indicated by MIDI SetTempo: n 24th of a usec per midi-clock. bravo! */
-    double deltatime;         /* milliseconds per midi tick. depends on set-tempo */
-    unsigned int division;
-
-    handle_midi_event_func_t playback_callback; /* function fired on each midi event as it is played */
-    void *playback_userdata; /* pointer to user-defined data passed to playback_callback function */
-};
-
-void fluid_player_settings(fluid_settings_t *settings);
-
-
-/*
- * fluid_midi_file
- */
-typedef struct
-{
-    const char *buffer;           /* Entire contents of MIDI file (borrowed) */
-    int buf_len;                  /* Length of buffer, in bytes */
-    int buf_pos;                  /* Current read position in contents buffer */
-    int eof;                      /* The "end of file" condition */
-    int running_status;
-    int c;
-    int type;
-    int ntracks;
-    int uses_smpte;
-    unsigned int smpte_fps;
-    unsigned int smpte_res;
-    unsigned int division;       /* If uses_SMPTE == 0 then division is
-				  ticks per beat (quarter-note) */
-    double tempo;                /* Beats per second (SI rules =) */
-    int tracklen;
-    int trackpos;
-    int eot;
-    int varlen;
-    int dtime;
-} fluid_midi_file;
-
-
-
-#define FLUID_MIDI_PARSER_MAX_DATA_SIZE 1024    /**< Maximum size of MIDI parameters/data (largest is SYSEX data) */
-
-/*
- * fluid_midi_parser_t
- */
-struct _fluid_midi_parser_t
-{
-    unsigned char status;           /* Identifies the type of event, that is currently received ('Noteon', 'Pitch Bend' etc). */
-    unsigned char channel;          /* The channel of the event that is received (in case of a channel event) */
-    unsigned int nr_bytes;          /* How many bytes have been read for the current event? */
-    unsigned int nr_bytes_total;    /* How many bytes does the current event type include? */
-    unsigned char data[FLUID_MIDI_PARSER_MAX_DATA_SIZE]; /* The parameters or SYSEX data */
-    fluid_midi_event_t event;        /* The event, that is returned to the MIDI driver. */
-};
-
-
 #endif /* _FLUID_MIDI_H */
